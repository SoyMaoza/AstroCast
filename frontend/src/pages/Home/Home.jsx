
import React, { useState } from 'react';
import './Home.css'; 
import ProbabilityCard from '../../components/ProbabilityCard';
const API_URL = 'http://localhost:3000/api/probability'; 

// DESPU√âS (ESPA√ëOL - Correcto)
const VARIABLES = [
    { value: 'calido', label: '‚òÄÔ∏è Muy C√°lido' },
    { value: 'frio', label: 'ü•∂ Muy Fr√≠o' },
    { value: 'humedo', label: 'üåßÔ∏è Muy H√∫medo' }, // üëà Cambi√© 'wet' por 'humedo'
    { value: 'ventoso', label: 'üí® Muy Ventoso' }, // üëà Cambi√© 'windy' por 'ventoso'
    { value: 'incomodo', label: 'ü•µ Muy Inc√≥modo' }, // üëà Cambi√© 'uncomfortable' por 'incomodo'
    { value: 'polvo', label: 'üå™Ô∏è Mucho Polvo' }, // üëà Cambi√© 'dust' por 'polvo'
];

const HomePage = () => {
    // 1. Estados de la aplicaci√≥n
    const [location, setLocation] = useState({ lat: 0, lon: -0 }); 
    const [date, setDate] = useState({ day: 0, month: 0 }); 
    const [variable, setVariable] = useState('hot'); 
    const [results, setResults] = useState(null); 
    const [loading, setLoading] = useState(false); 
    const [error, setError] = useState(null);


    const handleSearch = async () => {
        setLoading(true); 
        setError(null);    
        setResults(null);  

        // Validaci√≥n de inputs
        const validLat = !isNaN(parseFloat(location.lat));
        const validLon = !isNaN(parseFloat(location.lon));
        const validDay = date.day >= 1 && date.day <= 31;
        const validMonth = date.month >= 1 && date.month <= 12;

        if (!validLat || !validLon || !validDay || !validMonth || !variable) {
            setError('üö® Por favor, introduce Latitud/Longitud v√°lidas y una fecha correcta (D√≠a 1-31, Mes 1-12).');
            setLoading(false);
            return;
        }

        try {
            // Realiza la petici√≥n POST a tu API
            const response = await fetch(API_URL, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ // Env√≠a los datos al backend
                    // Aseguramos que se env√≠en como n√∫meros (aunque el backend los parsea)
                    lat: parseFloat(location.lat), 
                    lon: parseFloat(location.lon),
                    day: parseInt(date.day),
                    month: parseInt(date.month),
                    variable: variable
                })
            });

            if (!response.ok) {
                const errorData = await response.json();
                // El backend devuelve el error de simulaci√≥n de 0,0 aqu√≠
                throw new Error(errorData.message || `Error del servidor: ${response.status} ${response.statusText}`);
            }

            const data = await response.json();
            setResults(data); // Almacena los datos REALES del backend

        } catch (err) {
            console.error("Error en la consulta a la API:", err);
            setError(err.message || 'Error desconocido al conectar con el servicio de datos.');
        } finally {
            setLoading(false); 
        }
    };

    const getVariableButtonClass = (val) => 
        `variable-btn ${variable === val ? 'active' : ''}`;

    return (
        <div className="container homepage-container">
            {/* Encabezado Amigable */}
            <header className="page-header">
                <h1>Tu Gu√≠a de Clima Hist√≥rico</h1>
                <p>Planifica tu evento al aire libre con datos de observaci√≥n terrestre de la **NASA**.</p>
            </header>

            {/* --- PANEL DE CONTROL --- */}
            <div className="control-panel">
                
                {/* Columna 1: Inputs de Consulta */}
                <div className="query-card">
                    <h2>Define tu Consulta</h2>
                    
                    {/* Secci√≥n 1: Ubicaci√≥n */}
                    <div className="input-group">
                        <label htmlFor="lat-input">üìç Latitud:</label>
                        <input 
                            id="lat-input"
                            type="number" 
                            step="0.01" 
                            value={location.lat} 
                            onChange={(e) => setLocation({ ...location, lat: e.target.value })} 
                        />
                        <label htmlFor="lon-input">üìç Longitud:</label>
                        <input 
                            id="lon-input"
                            type="number" 
                            step="0.01" 
                            value={location.lon} 
                            onChange={(e) => setLocation({ ...location, lon: e.target.value })} 
                        />
                    </div>

                    {/* Secci√≥n 2: Fecha */}
                    <div className="input-group">
                        <label htmlFor="day-input">üìÖ D√≠a del Mes:</label>
                        <input 
                            id="day-input"
                            type="number" 
                            min="1" 
                            max="31" 
                            value={date.day} 
                            onChange={(e) => setDate({ ...date, day: e.target.value })} 
                        />
                        <label htmlFor="month-input">üìÖ Mes (1-12):</label>
                        <input 
                            id="month-input"
                            type="number" 
                            min="1" 
                            max="12" 
                            value={date.month} 
                            onChange={(e) => setDate({ ...date, month: e.target.value })} 
                        />
                    </div>
                    
                    {/* Secci√≥n 3: Variable Clim√°tica */}
                    <div className="variable-selector">
                        <label>Condici√≥n a Analizar:</label>
                        <div className="variable-buttons">
                            {VARIABLES.map(v => (
                                <button
                                    key={v.value}
                                    className={getVariableButtonClass(v.value)}
                                    onClick={() => setVariable(v.value)}
                                >
                                    {v.label}
                                </button>
                            ))}
                        </div>
                    </div>

                    {/* Bot√≥n para iniciar la b√∫squeda */}
                    <button 
                        className="btn-primary" 
                        onClick={handleSearch} 
                        disabled={loading}
                    >
                        {loading ? 'Analizando Datos...' : 'Analizar Probabilidades'}
                    </button>
                    
                    {/* Muestra mensajes de error si existen */}
                    {error && <p className="error-message">üö® {error}</p>}
                </div>

                {/* Columna 2: Mapa y Visualizaci√≥n de Ubicaci√≥n */}
                <div className="map-card">
                    <h3 className="map-title">Ubicaci√≥n Seleccionada</h3>
                    <div className="map-placeholder">
                        <p>üìç Latitud: {location.lat || 'N/A'}, Longitud: {location.lon || 'N/A'}</p>
                        <p className="map-note">[Aqu√≠ ir√≠a un Mapa Interactivo con el PIN]</p>
                    </div>
                </div>
            </div>

            {/* --- DASHBOARD DE RESULTADOS --- */}
            {results && (
                <div className="results-section">
                    <h2 className="results-header">
                        Resultados Hist√≥ricos para {results.location || 'Ubicaci√≥n Desconocida'} en {results.date || 'Fecha Desconocida'}
                    </h2>
                    
                    <div className="results-grid">
                        {/* 1. Tarjeta de Probabilidad */}
                        <ProbabilityCard
                            variable={results.variable} 
                            probability={results.probability}
                            historicalMean={results.historicalMean}
                            threshold={results.threshold}
                            unit={results.unit}
                            downloadLink={results.downloadLink}
                            detailDescription={results.detailDescription} // Pasamos la descripci√≥n detallada
                        />

                        {/* 2. Placeholder para la Descripci√≥n y Descarga */}
                        <div className="data-visualization-card">
                            <h3>Detalles del An√°lisis</h3>
                            <p className="detail-description">{results.detailDescription}</p>
                            
                            <h3 style={{marginTop: '15px'}}>Visualizaci√≥n</h3>
                            <div className="chart-placeholder">
                                <p>Gr√°fico de Distribuci√≥n simulada (Campana) mostrando el umbral y el riesgo.</p>
                            </div>
                            
                            {/* El enlace de descarga apunta a la URL OPeNDAP real */}
                            {results.downloadLink && (
                                <a href={results.downloadLink} target="_blank" rel="noopener noreferrer" className="download-link">
                                    Descargar Enlace a Datos Hist√≥ricos de NASA (OPeNDAP) ‚Üì
                                </a>
                            )}
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default HomePage;